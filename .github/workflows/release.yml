name: Analyze, build, and deploy to AKS
on:
  push:
    branches:
      - main

jobs:
  sonarcloud-analysis:
    name: SonarCloud analysis & build
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool install dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"S6-AdvancedSoftware-Individual_post-service" /o:"cockatoo" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build ./api/PostService.sln
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: sonarcloud-analysis
    if: ${{ success() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./api
          file: ./api/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_POSTS_MICROSERVICE }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_POSTS_MICROSERVICE }}:${{ github.sha }}

  deploy-to-aks:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Authenticate to AKS
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f cockatoo-posts-api-deployment.yaml
          kubectl apply -f cockatoo-posts-api-service.yaml
          kubectl apply -f cockatoo-posts-api-hpa.yaml

      - name: Deploy new image
        run: |
          kubectl set image deployment/${{ secrets.DEPLOYMENT_NAME }} ${{ secrets.CONTAINER_NAME }}=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_POSTS_MICROSERVICE }}:${{ github.sha }} --namespace=${{ secrets.NAMESPACE }}

      - name: Verify rollout
        run: |
          kubectl rollout status deployment/${{ secrets.DEPLOYMENT_NAME }} --namespace=${{ secrets.NAMESPACE }} --timeout=2m
